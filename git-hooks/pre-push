#!/bin/sh
#
# SafeJourney Pre-push Hook
#
# This hook runs the SafeJourney checker on all Swift files
# before allowing a push to proceed. It's more comprehensive than
# the pre-commit hook and catches violations across the entire codebase.
#
# Installation:
#   chmod +x git-hooks/pre-push
#   cp git-hooks/pre-push .git/hooks/pre-push
#
# Or use the install script:
#   ./git-hooks/install.sh

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SAFE_JOURNEY_REPO="https://github.com/customerio/safe-journey.git"
SAFE_JOURNEY_PATH="./.safe-journey"
SOURCE_PATHS="Sources/"

echo "${BLUE}üöÄ Running SafeJourney pre-push check...${NC}"

# Function to check if we're in a git repository
check_git_repo() {
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        echo "${RED}‚ùå Error: Not in a git repository${NC}"
        exit 1
    fi
}

# Function to ensure SafeJourney is available
ensure_checker() {
    if [ ! -d "$SAFE_JOURNEY_PATH" ]; then
        echo "${YELLOW}üì• Cloning SafeJourney repository...${NC}"
        if git clone "$SAFE_JOURNEY_REPO" "$SAFE_JOURNEY_PATH" --quiet; then
            echo "${GREEN}‚úÖ SafeJourney cloned successfully${NC}"
        else
            echo "${RED}‚ùå Failed to clone SafeJourney repository${NC}"
            exit 1
        fi
    else
        echo "${BLUE}üìã Using existing SafeJourney installation${NC}"
    fi
}

# Function to get information about what's being pushed
get_push_info() {
    local remote="$1"
    local url="$2"
    
    echo "${BLUE}üì° Push destination: $remote ($url)${NC}"
    
    # Read the push information from stdin
    while read local_ref local_sha remote_ref remote_sha; do
        if [ "$local_sha" = "0000000000000000000000000000000000000000" ]; then
            echo "${YELLOW}üóëÔ∏è  Deleting remote branch: $remote_ref${NC}"
            continue
        fi
        
        if [ "$remote_sha" = "0000000000000000000000000000000000000000" ]; then
            echo "${BLUE}üÜï Creating new remote branch: $remote_ref${NC}"
        else
            echo "${BLUE}üìù Updating remote branch: $remote_ref${NC}"
            echo "${BLUE}   Local:  $local_sha${NC}"
            echo "${BLUE}   Remote: $remote_sha${NC}"
        fi
        
        # Check if there are Swift files in the commits being pushed
        if [ "$remote_sha" != "0000000000000000000000000000000000000000" ]; then
            local swift_files
            swift_files=$(git diff --name-only "$remote_sha".."$local_sha" | grep '\.swift$' | wc -l)
            echo "${BLUE}üìä Swift files changed: $swift_files${NC}"
        else
            echo "${BLUE}üìä New branch - checking all Swift files${NC}"
        fi
    done
}

# Function to check if we have Swift files to check
should_run_checker() {
    local swift_files
    
    # Check if SOURCE_PATHS exists and contains Swift files
    if [ -d "$SOURCE_PATHS" ]; then
        swift_files=$(find "$SOURCE_PATHS" -name "*.swift" 2>/dev/null | wc -l)
        if [ "$swift_files" -gt 0 ]; then
            echo "${BLUE}üìä Found $swift_files Swift files in $SOURCE_PATHS${NC}"
            return 0
        fi
    fi
    
    # Fallback: check for any Swift files in the repository
    swift_files=$(find . -name "*.swift" -not -path "./.git/*" -not -path "./.*" 2>/dev/null | wc -l)
    if [ "$swift_files" -gt 0 ]; then
        echo "${BLUE}üìä Found $swift_files Swift files in repository${NC}"
        SOURCE_PATHS="."
        return 0
    fi
    
    echo "${YELLOW}‚ÑπÔ∏è  No Swift files found to check${NC}"
    return 1
}

# Function to run the checker with comprehensive settings
run_checker() {
    local cmd
    local output
    local exit_code
    
    # Use swift run with SafeJourney package
    cmd="swift run --package-path $SAFE_JOURNEY_PATH sj $SOURCE_PATHS"
    echo "${BLUE}üìã SafeJourney enforces consistent thread safety rules${NC}"
    echo "${BLUE}‚ö° Running: $cmd${NC}"
    
    # Run the checker and capture output
    if output=$($cmd 2>&1); then
        echo "${GREEN}‚úÖ All SafeJourney checks passed!${NC}"
        return 0
    else
        exit_code=$?
        echo "${RED}‚ùå SafeJourney violations found:${NC}"
        echo "$output"
        
        # Count violations
        local errors warnings
        errors=$(echo "$output" | grep -c "‚ùå" 2>/dev/null || echo "0")
        warnings=$(echo "$output" | grep -c "‚ö†Ô∏è" 2>/dev/null || echo "0")
        
        echo ""
        echo "${RED}üìä Summary: $errors errors, $warnings warnings${NC}"
        
        if [ "$errors" -gt 0 ]; then
            echo "${RED}üö® Push blocked due to critical violations!${NC}"
            echo "${YELLOW}üí° Fix the errors above before pushing.${NC}"
            return 1
        elif [ "$warnings" -gt 0 ]; then
            echo "${YELLOW}‚ö†Ô∏è  Warnings found. Consider fixing for better code quality.${NC}"
            echo "${GREEN}‚úÖ Push allowed to proceed.${NC}"
            return 0
        fi
        
        return $exit_code
    fi
}

# Function to provide helpful suggestions
show_help() {
    cat << EOF

${BLUE}üîß SafeJourney Pre-push Check Failed${NC}

${RED}üö´ Your push has been blocked due to thread safety violations.${NC}

${YELLOW}üîß Common fixes:${NC}

${GREEN}1. Missing underscore prefix:${NC}
   ${RED}‚ùå private var data: String = ""${NC}
   ${GREEN}‚úÖ private var _data: String = ""${NC}

${GREEN}2. Non-private underscore items:${NC}
   ${RED}‚ùå public var _state: String = ""${NC}
   ${GREEN}‚úÖ private var _state: String = ""${NC}

${GREEN}3. Direct underscore access:${NC}
   ${RED}‚ùå _data = "unsafe"${NC}
   ${GREEN}‚úÖ queue.sync { _data = "safe" }${NC}

${GREEN}4. Queue operations in underscore functions:${NC}
   ${RED}‚ùå private func _method() { queue.sync {} }${NC}
   ${GREEN}‚úÖ private func _method() { _directAccess() }${NC}

${BLUE}üìö Resources:${NC}
‚Ä¢ Documentation: https://github.com/customerio/safe-journey
‚Ä¢ Pattern guide: https://github.com/customerio/safe-journey#pattern-rules
‚Ä¢ Examples: https://github.com/customerio/safe-journey/tree/main/examples

${YELLOW}üöÄ After fixing violations, commit your changes and push again.${NC}

EOF
}

# Function to show push success message
show_success() {
    cat << EOF

${GREEN}üéâ SafeJourney Pre-push Check Passed!${NC}

${GREEN}‚úÖ Your code follows the SafeJourney pattern perfectly.${NC}
${GREEN}üöÄ Push proceeding to remote repository...${NC}

${BLUE}Thread safety guaranteed by:${NC}
‚Ä¢ ‚úÖ Proper underscore prefixing
‚Ä¢ ‚úÖ Private access control  
‚Ä¢ ‚úÖ Queue-protected access patterns
‚Ä¢ ‚úÖ No deadlock-causing patterns

${BLUE}üõ°Ô∏è Your team can confidently use this thread-safe code!${NC}

EOF
}

# Main execution
main() {
    local remote="$1"
    local url="$2"
    
    check_git_repo
    ensure_checker
    
    # Show push information
    get_push_info "$remote" "$url"
    
    if should_run_checker; then
        echo "${BLUE}üîç Running comprehensive thread safety check...${NC}"
        
        if run_checker; then
            show_success
            exit 0
        else
            show_help
            echo "${RED}üö´ Pre-push check failed! Push blocked.${NC}"
            echo "${YELLOW}üí° Use 'git push --no-verify' to bypass this check (not recommended).${NC}"
            exit 1
        fi
    else
        echo "${GREEN}‚úÖ No Swift files to check. Push proceeding...${NC}"
        exit 0
    fi
}

# Allow bypassing the hook with --no-verify
if [ "$1" = "--no-verify" ] || [ "$2" = "--no-verify" ]; then
    echo "${YELLOW}‚ö†Ô∏è  SafeJourney check bypassed with --no-verify${NC}"
    exit 0
fi

main "$@"