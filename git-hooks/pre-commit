#!/bin/sh
#
# SafeJourney Pre-commit Hook
#
# This hook runs the SafeJourney checker on staged Swift files
# before allowing a commit to proceed.
#
# Installation:
#   chmod +x git-hooks/pre-commit
#   cp git-hooks/pre-commit .git/hooks/pre-commit
#
# Or use the install script:
#   ./git-hooks/install.sh

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SAFE_JOURNEY_REPO="https://github.com/customerio/safe-journey.git"
SAFE_JOURNEY_PATH="./.safe-journey"
SOURCE_PATHS="Sources/"

echo "${BLUE}🔍 Running SafeJourney pre-commit check...${NC}"

# Function to check if we're in a git repository
check_git_repo() {
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        echo "${RED}❌ Error: Not in a git repository${NC}"
        exit 1
    fi
}

# Function to ensure SafeJourney is available
ensure_checker() {
    if [ ! -d "$SAFE_JOURNEY_PATH" ]; then
        echo "${YELLOW}📥 Cloning SafeJourney repository...${NC}"
        if git clone "$SAFE_JOURNEY_REPO" "$SAFE_JOURNEY_PATH" --quiet; then
            echo "${GREEN}✅ SafeJourney cloned successfully${NC}"
        else
            echo "${RED}❌ Failed to clone SafeJourney repository${NC}"
            exit 1
        fi
    else
        echo "${BLUE}📋 Using existing SafeJourney installation${NC}"
    fi
}

# Function to get staged Swift files
get_staged_swift_files() {
    git diff --cached --name-only --diff-filter=ACM | grep '\.swift$' | tr '\n' ' '
}

# Function to check if we should run the checker
should_run_checker() {
    local staged_files
    staged_files=$(get_staged_swift_files)
    
    if [ -z "$staged_files" ]; then
        echo "${YELLOW}ℹ️  No Swift files staged for commit${NC}"
        return 1
    fi
    
    echo "${BLUE}📝 Staged Swift files: $staged_files${NC}"
    return 0
}

# Function to run the checker
run_checker() {
    local cmd
    local output
    local exit_code
    
    # Use swift run with SafeJourney package
    cmd="swift run --package-path $SAFE_JOURNEY_PATH sj $SOURCE_PATHS"
    echo "${BLUE}📋 SafeJourney enforces consistent thread safety rules${NC}"
    echo "${BLUE}⚡ Running: $cmd${NC}"
    
    # Run the checker and capture output
    if output=$($cmd 2>&1); then
        echo "${GREEN}✅ All SafeJourney checks passed!${NC}"
        return 0
    else
        exit_code=$?
        echo "${RED}❌ SafeJourney violations found:${NC}"
        echo "$output"
        
        # Count violations
        local errors warnings
        errors=$(echo "$output" | grep -c "❌" 2>/dev/null || echo "0")
        warnings=$(echo "$output" | grep -c "⚠️" 2>/dev/null || echo "0")
        
        echo ""
        echo "${RED}📊 Summary: $errors errors, $warnings warnings${NC}"
        
        if [ "$errors" -gt 0 ]; then
            echo "${RED}🚨 Commit blocked due to critical violations!${NC}"
            echo "${YELLOW}💡 Fix the errors above and try committing again.${NC}"
            return 1
        elif [ "$warnings" -gt 0 ]; then
            echo "${YELLOW}⚠️  Warnings found, but commit is allowed.${NC}"
            echo "${YELLOW}💡 Consider fixing warnings for better thread safety.${NC}"
            return 0
        fi
        
        return $exit_code
    fi
}

# Function to provide helpful suggestions
show_help() {
    cat << EOF

${BLUE}🔧 SafeJourney Quick Reference:${NC}

${GREEN}✅ Good patterns:${NC}
  • private var _mutableState: String = ""
  • queue.sync { _mutableState = "new" }
  • private func _internalMethod() { _mutableState = "safe" }

${RED}❌ Bad patterns:${NC}
  • var mutableState: String = ""          (missing underscore)
  • public var _state: String = ""         (underscore items must be private)
  • _mutableState = "unsafe"               (direct access needs queue protection)
  • private func _method() { queue.sync {} } (creates deadlock)

${YELLOW}💡 Quick fixes:${NC}
  • Add underscore prefix to mutable properties
  • Make underscore items private
  • Wrap underscore access in queue.sync { }
  • Remove queue operations from underscore functions

For more details, see: https://github.com/customerio/safe-journey

EOF
}

# Main execution
main() {
    check_git_repo
    ensure_checker
    
    if should_run_checker; then
        if run_checker; then
            echo "${GREEN}🎉 Pre-commit check passed! Commit proceeding...${NC}"
            exit 0
        else
            show_help
            echo "${RED}🚫 Pre-commit check failed! Commit blocked.${NC}"
            exit 1
        fi
    else
        echo "${GREEN}✅ No Swift files to check. Commit proceeding...${NC}"
        exit 0
    fi
}

# Allow bypassing the hook with --no-verify
if [ "$1" = "--no-verify" ]; then
    echo "${YELLOW}⚠️  SafeJourney check bypassed with --no-verify${NC}"
    exit 0
fi

main "$@"